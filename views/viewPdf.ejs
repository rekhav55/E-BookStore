<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://kit.fontawesome.com/1966a3f118.js" crossorigin="anonymous"></script>
    <title>Pdf</title>
</head>
<body>
    <div class="top-bar">
        <button class="btn" id="prev-page">
          <i class="fas fa-arrow-circle-left"></i>Prev Page
        </button>
        <button class="btn" id="next-page">
          Next Page<i class="fas fa-arrow-circle-right"></i>
        </button>
        <span class="page-info">
          Page <span id="page-num"></span> of <span id="page-count"></span>
        </span>
        <span id="book-pdf" style="display: none;"><%=book.pdf%></span>
      </div>
      <canvas id="pdf-render"></canvas>
      <script src="https://mozilla.github.io/pdf.js/build/pdf.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
      <script>
        const url = document.querySelector("#book-pdf").textContent;
        let pdfDoc = null, pageNum = 1, pageIsRendering = false, pageNumIsPending=null;
        const scale=1.5, canvas = document.querySelector("#pdf-render"), ctx = canvas.getContext('2d');
        const renderPage = num => {
            pageIsRendering = true;
            pdfDoc.getPage(num).then(page=>{
              const viewport = page.getViewport({scale});
              canvas.height = viewport.height;
              canvas.width=viewport.width;
              const renderCtx = {
                canvasContext: ctx,
                viewport
              }
              page.render(renderCtx).promise.then(()=>{
                pageIsRendering = false;
                if(pageNumIsPending!=null){
                  renderPage(pageNumIsPending);
                  pageNumIsPending=null;
                }
              });
              document.querySelector('#page-num').textContent=num;
            })
        }
  
        const queueRenderPage = num=>{
          if(pageIsRendering){
            pageNumIsPending=num;
          }
          else{
            renderPage(num);
          }
        }
        
        const showPrevPage=()=>{
          if(pageNum<=1){
            return;
          }
          pageNum--;
          queueRenderPage(pageNum);
        }
  
        const showNextPage=()=>{
          if(pageNum>=pdfDoc.numPages){
            return;
          }
          pageNum++;
          queueRenderPage(pageNum);
        }
  
        pdfjsLib.getDocument(url).promise.then(pdfDoc_=>{
          pdfDoc=pdfDoc_;
          document.querySelector("#page-count").textContent=pdfDoc.numPages;
          renderPage(pageNum);
          console.log(pdfDoc);
        })
  
        document.querySelector("#prev-page").addEventListener('click', showPrevPage);
        document.querySelector("#next-page").addEventListener('click', showNextPage);
      </script>
</body>
</html>